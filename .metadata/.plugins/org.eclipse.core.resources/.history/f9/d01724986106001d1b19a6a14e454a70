package com.rishabhtech.blog.security;

import java.io.IOException;

import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hibernate.internal.build.AllowSysOut;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.MalformedJwtException;

@Component
public class JWTAuthenicationFilter extends OncePerRequestFilter {

	@Autowired
	private JWTTokenHelper jwtTokenHelper;

	@Autowired
	private UserDetailsService userDetailsService;

	@Override
	protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
			throws ServletException, IOException {
		
		//1. token
		String requestToken = request.getHeader("Authorization");
		
		//Bearer 2352523
		System.out.println(requestToken);
		
		//2. get username and token
		String username = null;
		String token = null;
		if(request!=null && requestToken.startsWith("Bearer"))
		{
			token = requestToken.substring(7);
			try {
			username = this.jwtTokenHelper.getUsernameFromToken(token);
			}
			catch(IllegalArgumentException e)
			{
				System.out.println("Unable to get JWT Token.");
			}
			catch(ExpiredJwtException e)
			{
				System.out.println("JWT Token Expired.");
			}
			catch(MalformedJwtException e)
			{
				System.out.println("Invalid JWT.");
			}
			
		}
		else
		{
			System.out.println("JWT Token does not begin with Bearer.");
		}
		
		//3. once we get the token now validate the token
		
		if(username!=null &&  SecurityContextHolder.getContext().getAuthentication()==null)
		{
			UserDetails userDetails = this.userDetailsService.loadUserByUsername(username);
			
			if(this.jwtTokenHelper.validateToken(token, userDetails));
			{
				//all good 
				//do authentication
				//validate token
				UsernamePasswordAuthenticationToken usernamePasswordAuthenticationToken = new UsernamePasswordAuthenticationToken(userDetails, null,userDetails.getAuthorities());
				usernamePasswordAuthenticationToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));
				SecurityContextHolder.getContext().setAuthentication(usernamePasswordAuthenticationToken);
			}
			else{
				System.out.println("Invalid JWT Token");
			}
		
		else
		{
			System.out.println("Username is null or Context is not null.");
		}
		}	
		
		
	}

}
